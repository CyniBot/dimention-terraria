"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const errorhelper_1 = require("dimensions/errorhelper");
const Net = require("net");
const uuid = require("uuid");
const fs = require("fs");
/* Responds to HTTP requests on the specified port with a tShock /v2/status response, which includes the player counts
 * and player names from all hosted Dimensions */
class RestApi {
    constructor(port, globalTracking, serversDetails, servers, response, logging) {
        this.servers = servers;
        this.port = port;
        this.globalTracking = globalTracking;
        this.serversDetails = serversDetails;
        this.response = response;
        this.openSockets = {};
        this.logging = logging;
        this.createServer();
        this.logging.info(`RestApi on ${port} started.`);
    }
    /* Starts a new server listening for socket connections on the appropriate port */
    createServer() {
        this.server = Net.createServer((socket) => {
            this.handleSocket(socket);
        }).on("error", (e) => {
            this.logging.error("REST API Server error: " + errorhelper_1.default.toMessage(e));
        }).listen(this.port);
    }
    /* Used by the reload command to check if the port has changed, and if so
     * will close existing connections and the socket server, then start a new
     * one using the new port */
    handleReload(port) {
        if (this.port !== port) {
            const socketIds = Object.keys(this.openSockets);
            let id;
            for (let i = 0; i < socketIds.length; i++) {
                id = socketIds[i];
                this.openSockets[id].destroy();
            }
            this.server.close();
            this.port = port;
            this.createServer();
        }
    }
    /* Responds to a new socket with the /v2/status-like response and then closes
     * the connection */
    handleSocket(socket) {
        const id = uuid.v4();
        this.openSockets[id] = socket;
        socket.on("close", () => {
            delete this.openSockets[id];
        });
        socket.on("error", (e) => {
            this.logging.warn("REST API Socket error: " + errorhelper_1.default.toMessage(e));
        });
        socket.setEncoding("utf8");
        this.sendInformation(socket)
            .then(() => {
            socket.destroy();
        });
    }
    /* Generates a /v2/status-like response using the tracking server counts and player names
     * and sends it to the socket */
    async sendInformation(socket) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
        let version = "1.4.3.6";
        try {
            version = (await fs.promises.readFile("version.txt")).toString();
        }
        catch (e) {
        }
        const response = {
            status: 200,
            name: (_b = (_a = this.response) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : "",
            serverversion: (_d = (_c = this.response) === null || _c === void 0 ? void 0 : _c.version) !== null && _d !== void 0 ? _d : version,
            tshockversion: {
                Major: 4,
                Minor: 4,
                Build: 0,
                Revision: 0,
                MajorRevision: 0,
                MinorRevision: 0
            },
            port: (_f = (_e = this.response) === null || _e === void 0 ? void 0 : _e.terrariaServerPort) !== null && _f !== void 0 ? _f : 7777,
            playercount: 0,
            maxplayers: (_h = (_g = this.response) === null || _g === void 0 ? void 0 : _g.maxPlayers) !== null && _h !== void 0 ? _h : 400,
            world: (_k = (_j = this.response) === null || _j === void 0 ? void 0 : _j.worldName) !== null && _k !== void 0 ? _k : "Dimensions Generic",
            uptime: "0.01:27:38",
            serverpassword: (_m = (_l = this.response) === null || _l === void 0 ? void 0 : _l.hasServerPassword) !== null && _m !== void 0 ? _m : false,
            players: []
        };
        const playerNames = Object.keys(this.globalTracking.names);
        // This is compatible with terraria-servers.com.
        // When they fix their usage of old rest, this
        // should be updated
        response.players = playerNames.join(", ");
        // New REST version
        // response.players = playerNames;
        response.playercount = playerNames.length;
        socket.write("HTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nContent-Type:application/json; charset=utf-8\n\n" + JSON.stringify(response));
    }
    close() {
        this.server.close();
    }
}
exports.default = RestApi;
