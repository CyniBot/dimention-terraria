"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const packetwriter_1 = require("dimensions/packets/packetwriter");
const packettypes_1 = require("dimensions/packettypes");
const PlayerInfo = require("terraria-packet/src/packet/Packet_PlayerInfo.gen");
class Player {
    constructor(client) {
        this.position = {
            x: 0,
            y: 0
        };
        // Visuals
        this.skinVariant = 0;
        this.hair = 0;
        this.hairDye = 0;
        this.hideVisuals = 0;
        this.hideVisuals2 = 0;
        this.hideMisc = 0;
        this.hairColor = { R: 0, G: 0, B: 0 };
        this.skinColor = { R: 0, G: 0, B: 0 };
        this.eyeColor = { R: 0, G: 0, B: 0 };
        this.shirtColor = { R: 0, G: 0, B: 0 };
        this.underShirtColor = { R: 0, G: 0, B: 0 };
        this.pantsColor = { R: 0, G: 0, B: 0 };
        this.shoeColor = { R: 0, G: 0, B: 0 };
        this.extraAccessory = false;
        this.usingBiomeTorches = false;
        this.unlockedBiomeTorches = false;
        this.happyFunTorchTime = false;
        this.unlockedSuperCart = false;
        this.enabledSuperCart = false;
        this.usedAegisCrystal = false;
        this.usedAegisFruit = false;
        this.usedArcaneCrystal = false;
        this.usedGalaxyPearl = false;
        this.usedGummyWorm = false;
        this.usedAmbrosia = false;
        this.ateArtisanBread = false;
        this.difficulty = "Softcore";
        this.mode = "Classic";
        this.client = client;
        this.id = 0;
        this.name = "";
        this.life = 100;
        this.mana = 20;
        this.allowedNameChange = false;
        this.allowedCharacterChange = false;
        this.allowedLifeChange = false;
        this.allowedManaChange = false;
        // Inventory of Client - only used for SSC -> to Non-SSC switching
        this.inventory = [];
    }
    setItem(item) {
        if (this.client === null) {
            return;
        }
        let playerInventorySlot = new packetwriter_1.default()
            .setType(packettypes_1.default.PlayerInventorySlot)
            .packByte(this.id)
            .packInt16(item.slot)
            .packInt16(item.stack)
            .packByte(item.prefix)
            .packInt16(item.netID)
            .data;
        this.client.socket.write(playerInventorySlot);
    }
    restoreSavedMaxHealth() {
        if (this.client === null) {
            return;
        }
        let playerLife = new packetwriter_1.default()
            .setType(packettypes_1.default.PlayerHP)
            .packByte(this.id)
            .packInt16(this.life)
            .packInt16(this.life)
            .data;
        this.client.socket.write(playerLife);
    }
    /**
     * @deprecated Use restoreSavedMaxHealth instead
     */
    setLife() {
        this.restoreSavedMaxHealth();
    }
    restoreSavedMaxMana() {
        if (this.client === null) {
            return;
        }
        let playerMana = new packetwriter_1.default()
            .setType(packettypes_1.default.PlayerMana)
            .packByte(this.id)
            .packInt16(this.mana)
            .packInt16(this.mana)
            .data;
        this.client.socket.write(playerMana);
    }
    /**
     * @deprecated Use restoreSavedMaxMana instead
     */
    setMana() {
        this.restoreSavedMaxMana();
    }
    setVisuals() {
        if (this.client === null) {
            return;
        }
        this.client.socket.write(PlayerInfo.toBuffer({
            playerId: this.id,
            skinVariant: this.skinVariant,
            hair: this.hair,
            name: this.name,
            hairDye: this.hairDye,
            hideVisuals: this.hideVisuals,
            hideVisuals2: this.hideVisuals2,
            hideMisc: this.hideMisc,
            hairColor: this.hairColor,
            skinColor: this.skinColor,
            eyeColor: this.eyeColor,
            shirtColor: this.shirtColor,
            underShirtColor: this.underShirtColor,
            pantsColor: this.pantsColor,
            shoeColor: this.shoeColor,
            difficulty: this.difficulty,
            mode: this.mode,
            extraAccessory: this.extraAccessory,
            usingBiomeTorches: this.usingBiomeTorches,
            unlockedBiomeTorches: this.unlockedBiomeTorches,
            happyFunTorchTime: this.happyFunTorchTime,
            unlockedSuperCart: this.unlockedSuperCart,
            enabledSuperCart: this.enabledSuperCart,
            usedAegisCrystal: this.usedAegisCrystal,
            usedAegisFruit: this.usedAegisFruit,
            usedArcaneCrystal: this.usedArcaneCrystal,
            usedGalaxyPearl: this.usedGalaxyPearl,
            usedGummyWorm: this.usedGummyWorm,
            usedAmbrosia: this.usedAmbrosia,
            ateArtisanBread: this.ateArtisanBread
        }));
    }
}
exports.default = Player;
