"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const http = require("http");
const util = require("node:util");
const url = require("node:url");
/**
 * This is the built-in dimensions blacklist integration. It is built for Dark Gaming's API but you can
 * modify it to work with your own blacklist API.
 *
 * The goal of the blacklist is to use an API to check whether a given IP should be blocked according to some
 * criteria. This criteria could be if an IP is a VPN, Server or Proxy.
 */
class Blacklist {
    constructor(configuration) {
        this.configuration = configuration;
    }
    /**
     * Checks whether or not an IP address is a host IP (and is therefore blocked)
     *
     * @param ip The ip to check whether or not it is a host ip
     * @return Whether or not the ip is a host ip
     */
    checkInformation(name, ip, uuid) {
        return new Promise((resolve, reject) => {
            const requestUrl = url.parse(url.format({
                protocol: 'http',
                hostname: this.configuration.hostname,
                pathname: this.configuration.path,
                query: {
                    name: name,
                    ip: ip,
                    uuid: uuid
                }
            }));
            http.get({
                hostname: requestUrl.hostname,
                port: this.configuration.port,
                path: requestUrl.path,
                headers: {
                    token: this.configuration.apiKey
                }
            }, (res) => {
                let data = "";
                res.on("data", (chunk) => {
                    data += chunk;
                });
                res.on("end", () => {
                    this.parseResponse(data, resolve, reject);
                });
            }).on('error', (e) => {
                reject(e);
            });
        });
    }
    /**
     * Parses a response from the http-based blacklist
     *
     * @param ip The ip that was checked
     * @param data The data that was returned in the response
     * @param resolve The resolution function containing if the ip is not a host ip
     * @param reject The rejection function if an error occured
     */
    parseResponse(data, resolve, reject) {
        let resDetails;
        try {
            resDetails = JSON.parse(data);
        }
        catch (e) {
            reject(e);
            return;
        }
        switch (resDetails[0]) {
            case "Ok":
                resolve(resDetails[1].isBlacklisted);
                break;
            case "Forbidden":
                reject(new Error("Invalid token"));
                break;
            default:
                reject(new Error("Invalid API call. Response: " + util.inspect(resDetails, false, 2, true)));
        }
    }
}
exports.default = Blacklist;
