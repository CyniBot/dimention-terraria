"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const packetreader_1 = require("dimensions/packets/packetreader");
const tsl = "a70007786900000100d02060098310fb04e902f103010000000b4461726b2047616d696e6702a273513fec7b4ea294429386e41d7d16000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000007000600090008006b006c006f0000000000000000000000000000";
const real = "a70007cc3500000100d02060096b10c10126025203cb807e6a0b4461726b2047616d696e67029a1704e8b0b7a346b86db3992c49185901000000e6000000040607080403050301030301000102010286eb51be98800b00008d0c0000aa18000001040405fe05000033110000a91c00000703000201040405030503010303010001000000000000000000000007000600a800a900ffffffffffff00000000000000000000000000";
function read(packet) {
    let reader = new packetreader_1.default(packet);
    const time = reader.readInt32(); // Time
    const dayAndMoon = reader.readByte(); // Day&MoonInfo
    const moonPhase = reader.readByte(); // Moon Phase
    const maxTilesX = reader.readInt16(); // MaxTilesX
    const maxTilesY = reader.readInt16(); // MaxTilesY
    const spawn = {
        x: reader.readInt16(),
        y: reader.readInt16()
    };
    const worldSurface = reader.readInt16(); // WorldSurface
    const rockLayer = reader.readInt16(); // RockLayer
    const worldId = reader.readInt32(); // WorldID
    const worldName = reader.readString(); // World Name
    const gamemode = reader.readByte(); // Gamemode
    const worldUniqueId = reader.readBytes(16); // World Unique ID
    const worldGeneratorVersion = reader.readUInt64(); // World Generator Version
    reader.readByte(); // Moon Type
    reader.readByte(); // Tree Background
    reader.readByte(); // Tree Background 2
    reader.readByte(); // Tree Background 3
    reader.readByte(); // Tree Background 4
    reader.readByte(); // Corruption Background
    reader.readByte(); // Jungle Background
    reader.readByte(); // Snow Background
    reader.readByte(); // Hallow Background
    reader.readByte(); // Crimson Background
    reader.readByte(); // Desert Background
    reader.readByte(); // Ocean Background
    reader.readByte(); // Mushroom Background
    reader.readByte(); // Underworld Background
    reader.readByte(); // Ice Back Style
    reader.readByte(); // Jungle Back Style
    reader.readByte(); // Hell Back Style
    reader.readSingle(); // Wind Speed Set
    reader.readByte(); // Cloud Number
    reader.readInt32(); // Tree 1
    reader.readInt32(); // Tree 2
    reader.readInt32(); // Tree 3
    reader.readByte(); // Tree Style 1
    reader.readByte(); // Tree Style 2
    reader.readByte(); // Tree Style 3
    reader.readByte(); // Tree Style 4
    reader.readInt32(); // Cave Back 1
    reader.readInt32(); // Cave Back 2
    reader.readInt32(); // Cave Back 3
    reader.readByte(); // Cave Back Style 1
    reader.readByte(); // Cave Back Style 2
    reader.readByte(); // Cave Back Style 3
    reader.readByte(); // Cave Back Style 4
    reader.readByte(); // Tree Tops Variation 1
    reader.readByte(); // Tree Tops Variation 2
    reader.readByte(); // Tree Tops Variation 3
    reader.readByte(); // Tree Tops Variation 4
    reader.readByte(); // Tree Tops Variation 5
    reader.readByte(); // Tree Tops Variation 6
    reader.readByte(); // Tree Tops Variation 7
    reader.readByte(); // Tree Tops Variation 8
    reader.readByte(); // Tree Tops Variation 9
    reader.readByte(); // Tree Tops Variation 10
    reader.readByte(); // Tree Tops Variation 11
    reader.readByte(); // Tree Tops Variation 12
    reader.readByte(); // Tree Tops Variation 13
    reader.readSingle(); // Rain
    console.log("time:", time, "dayAndMoon:", dayAndMoon, "moonPhase:", moonPhase, "maxTilesX:", maxTilesX, "maxTilesY:", maxTilesY, "spawn:", spawn, "worldSurface:", worldSurface, "rockLayer:", rockLayer, "worldId:", worldId, "worldName:", `'${worldName}'`, "gamemode:", gamemode, "worldUniqueId:", worldUniqueId, "worldGeneratorVersion:", worldGeneratorVersion);
}
read(new Buffer(tsl, "hex"));
read(new Buffer(real, "hex"));
