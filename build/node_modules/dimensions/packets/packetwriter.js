"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const dumbpacketwriter_1 = require("dimensions/packets/dumbpacketwriter");
const utils_1 = require("dimensions/utils");
class PacketWriter {
    constructor(writerCls = dumbpacketwriter_1.default) {
        this._queue = [];
        this._size = 0;
        this._data = null;
        this._writerCls = writerCls;
    }
    compile() {
        const writer = new this._writerCls(this._size);
        for (const item of this._queue) {
            writer[item.method](item.value);
        }
        this._data = writer.data;
    }
    setType(type) {
        this._queue.push({ method: "setType", value: type });
        if (this._size === 0)
            this._size = 3;
        return this;
    }
    packInt16(int16) {
        this._queue.push({ method: "packInt16", value: int16 });
        this._size += 2;
        return this;
    }
    packUInt16(uint16) {
        this._queue.push({ method: "packUInt16", value: uint16 });
        this._size += 2;
        return this;
    }
    packInt32(int32) {
        this._queue.push({ method: "packInt32", value: int32 });
        this._size += 4;
        return this;
    }
    packUInt32(uint32) {
        this._queue.push({ method: "packUInt32", value: uint32 });
        this._size += 4;
        return this;
    }
    packUInt64(uint64) {
        this._queue.push({ method: "packUInt64", value: uint64 });
        this._size += 8;
        return this;
    }
    packSingle(single) {
        this._queue.push({ method: "packSingle", value: single });
        this._size += 4;
        return this;
    }
    packByte(byte) {
        this._queue.push({ method: "packByte", value: byte });
        this._size += 1;
        return this;
    }
    packSByte(byte) {
        this._queue.push({ method: "packSByte", value: byte });
        this._size += 1;
        return this;
    }
    packBytes(bytes) {
        this._queue.push({ method: "packBytes", value: bytes });
        this._size += bytes.length;
        return this;
    }
    packHex(hex) {
        if (hex.length % 2 !== 0) {
            throw new Error("Tried to pack invalid hex string.");
        }
        this._queue.push({ method: "packHex", value: hex });
        this._size += hex.length / 2;
        return this;
    }
    packBuffer(buffer) {
        this._queue.push({ method: "packBuffer", value: buffer });
        this._size += buffer.length;
        return this;
    }
    packString(str) {
        this._queue.push({ method: "packString", value: str });
        this._size += (0, utils_1.getPackedStringByteLen)(str);
        return this;
    }
    packNetworkText(networkText) {
        this.packByte(networkText.mode);
        this.packString(networkText.text);
        if (networkText.substitutionList) {
            this.packByte(networkText.substitutionList.length);
            for (let i = 0; i < networkText.substitutionList.length; i++) {
                this.packNetworkText(networkText.substitutionList[i]);
            }
        }
        else if (networkText.mode != 0) {
            this.packByte(0);
        }
        return this;
    }
    packColor(color) {
        this.packByte(color.R);
        this.packByte(color.G);
        this.packByte(color.B);
        return this;
    }
    get data() {
        if (this._data === null) {
            this.compile();
        }
        return this._data;
    }
}
exports.default = PacketWriter;
