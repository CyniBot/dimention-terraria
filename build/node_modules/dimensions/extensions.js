"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("dimensions/utils");
const glob = require("glob");
const path = require("path");
const errorhelper_1 = require("dimensions/errorhelper");
/**
 * Require a js file, if it exists, that defines the extensions to load.
 * This. is most useful when using a bundler to package an install of dimensions into a small js file.
 * Note however that this means they will NOT be loaded again when using the CLI to do a reloadplugins.
 */
let extensionModules = null;
try {
    const possibleExtensionModules = require("../../extensions");
    if (!Array.isArray(possibleExtensionModules)) {
        console.log("WARNING: Extensions file must export an array to be valid.");
    }
    else {
        extensionModules = possibleExtensionModules;
    }
}
catch (e) {
    extensionModules = null;
}
class Extensions {
    static loadExtensions(extensionsList, listenServers, options, logging, storageMap) {
        try {
            if (extensionModules === null) {
                logging.info("Dynamically loading extensions.");
                extensionModules = glob.sync(`${this.folder}/**/index.js`).map((file) => {
                    return (0, utils_1.requireNoCache)(path.resolve(file), require);
                }).filter(extensionModule => typeof extensionModule.default !== "undefined");
            }
            extensionModules.forEach((extensionModule) => {
                const extension = new (extensionModule.default)(logging);
                const storage = storageMap.get(extension.name);
                if (extension.load && typeof storage !== "undefined") {
                    extension.load(storage);
                    storageMap.delete(extension.name);
                }
                extensionsList[extension.name] = extension;
                if (typeof extension.setListenServers === "function") {
                    extension.setListenServers(listenServers);
                }
                if (options.extensionLoad) {
                    logging.info(`[Extension] ${extension.name} ${extension.version} loaded.`);
                }
            });
        }
        catch (e) {
            logging.error(`Failed to load extensions. Error: ` + errorhelper_1.default.toMessage(e));
        }
    }
}
Extensions.folder = "./extensions";
exports.default = Extensions;
