"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClientCommandHandler = void 0;
const clientstate_1 = require("dimensions/clientstate");
/**
 * Handles commands before they go to any terraria servers
 */
class ClientCommandHandler {
    /**
     * Turns a message into a command object, splitting the command name
     * from its arguments.
     *
     * @param message The message to convert into a command object
     * @return The command object created
     */
    parseCommand(message) {
        let args = message.split(' ');
        let name = message.substr(1, args[0].length - 1);
        // Remove first arg as it is the command name
        args.splice(0, 1);
        return { name: name.toLowerCase(), args: args };
    }
    /**
     * Handles any matching command from the client
     *
     * @param command The command object with the name and args
     * @param client The client that is trying to use the command
     * @return whether or not the command was handled
     */
    handle(command, client) {
        let handled = false;
        if (client.servers[command.name]) {
            if (client.server.name.toLowerCase() == command.name && client.connected) {
                client.sendChatMessage(client.options.language.phrases.youAreAlreadyInthatDimension);
            }
            else {
                if (client.state === clientstate_1.default.FullyConnected || client.state === clientstate_1.default.Disconnected) {
                    client.sendChatMessage(client.options.language.phrases.shiftingToDimension.replace("${name}", client.servers[command.name].name), "FF0000");
                    client.changeServer(client.servers[command.name]);
                }
                else {
                    client.sendChatMessage(client.options.language.phrases.youNeedToWaitUntilConnected);
                }
            }
            handled = true;
        }
        else {
            switch (command.name) {
                case "who":
                    handled = this.handleWho(client);
                    break;
                case "dimensions":
                case client.options.language.phrases.dimensionsCommandName:
                    handled = this.handleDimensions(client);
                    break;
                case "void":
                    handled = this.handleVoid(client);
                    break;
            }
        }
        return handled;
    }
    /**
     * Adds a message denoting how many users exist in total on this Dimensions instance
     *
     * @param args The command args
     * @param client The client executing who
     * @return Whether or not the who command was handled
     */
    handleWho(client) {
        let total = 0;
        let keys = Object.keys(client.serversDetails);
        for (let i = 0, len = keys.length; i < len; i++) {
            total += client.serversDetails[keys[i]].clientCount;
        }
        // Try to make it come after the normal response
        setTimeout(function () {
            client.sendChatMessage(client.options.language.phrases.playerCount.replace("${total}", total.toString()));
        }, 100);
        return false;
    }
    /**
     * Gives the client a list of dimensions available prefixed with '/'
     *
     * @param args The command args
     * @param client The client who is executing the command
     * @return Whether the dimensions command was handled
     */
    handleDimensions(client) {
        let dimensionsList = "";
        let dimensionNames = Object.keys(client.servers);
        for (let i = 0; i < dimensionNames.length; i++) {
            let name = dimensionNames[i];
            let hidden = client.servers[name].hidden;
            if (!hidden) {
                dimensionsList += (i > 0 ? "[c/00B530:,] " : " ") + "/" + client.servers[name].name;
            }
        }
        client.sendChatMessage(client.options.language.phrases.availableDimensions);
        client.sendChatMessage(dimensionsList);
        return true;
    }
    /**
     * Allows a user to disconnect from their current dimension leaving them without a server
     *
     * @param args The command args
     * @param client The client executing the void command
     * @return Whether the void command was handled
     */
    handleVoid(client) {
        client.disconnectFromServer();
        client.sendChatMessage(client.options.language.phrases.youEnteredTheVoid);
        return true;
    }
}
exports.ClientCommandHandler = ClientCommandHandler;
;
exports.default = ClientCommandHandler;
